From f5e23e436d341a44dafe5a18876cfcadc809b46b Mon Sep 17 00:00:00 2001
From: Roman Dobosz <roman.dobosz@intel.com>
Date: Mon, 8 Jan 2018 14:33:45 +0100
Subject: [PATCH 2/4] Remove server group sched filter support caching

Backport of https://review.openstack.org/#/c/529200 by Jay Pipes to
Ocata.
---
 nova/scheduler/utils.py                           | 91 ++++++++++-------------
 nova/tests/functional/test_server_group.py        | 19 -----
 nova/tests/unit/scheduler/test_scheduler_utils.py | 16 ++--
 3 files changed, 46 insertions(+), 80 deletions(-)

diff --git a/nova/scheduler/utils.py b/nova/scheduler/utils.py
index 5e9222d14e..682b4cc199 100644
--- a/nova/scheduler/utils.py
+++ b/nova/scheduler/utils.py
@@ -250,23 +250,31 @@ def parse_options(opts, sep='=', converter=str, name=""):
     return good
 
 
-def validate_filter(filter):
-    """Validates that the filter is configured in the default filters."""
-    return filter in CONF.filter_scheduler.enabled_filters
+def _validate_filter(filter):
+    """Validates that the filter is configured in the defaults.
 
+    :param filter: Either short or long module-scoped name of a filter
+    """
+    for enabled_filter in CONF.filter_scheduler.enabled_filters:
+        if filter in enabled_filter:
+            return True
+    return False
+
+
+def _validate_weigher(weigher):
+    """Validates that the weigher is configured in the defaults.
+
+    :param weigher: Either short or long module-scoped name of a weigher
+    """
 
-def validate_weigher(weigher):
-    """Validates that the weigher is configured in the default weighers."""
     weight_classes = CONF.filter_scheduler.weight_classes
     if 'nova.scheduler.weights.all_weighers' in weight_classes:
         return True
-    return weigher in weight_classes
-
 
-_SUPPORTS_AFFINITY = None
-_SUPPORTS_ANTI_AFFINITY = None
-_SUPPORTS_SOFT_AFFINITY = None
-_SUPPORTS_SOFT_ANTI_AFFINITY = None
+    for enabled_weigher in weight_classes:
+        if weigher in enabled_weigher:
+            return True
+    return False
 
 
 def _get_group_details(context, instance_uuid, user_group_hosts=None):
@@ -279,23 +287,6 @@ def _get_group_details(context, instance_uuid, user_group_hosts=None):
 
     :returns: None or namedtuple GroupDetails
     """
-    global _SUPPORTS_AFFINITY
-    if _SUPPORTS_AFFINITY is None:
-        _SUPPORTS_AFFINITY = validate_filter(
-            'ServerGroupAffinityFilter')
-    global _SUPPORTS_ANTI_AFFINITY
-    if _SUPPORTS_ANTI_AFFINITY is None:
-        _SUPPORTS_ANTI_AFFINITY = validate_filter(
-            'ServerGroupAntiAffinityFilter')
-    global _SUPPORTS_SOFT_AFFINITY
-    if _SUPPORTS_SOFT_AFFINITY is None:
-        _SUPPORTS_SOFT_AFFINITY = validate_weigher(
-            'nova.scheduler.weights.affinity.ServerGroupSoftAffinityWeigher')
-    global _SUPPORTS_SOFT_ANTI_AFFINITY
-    if _SUPPORTS_SOFT_ANTI_AFFINITY is None:
-        _SUPPORTS_SOFT_ANTI_AFFINITY = validate_weigher(
-            'nova.scheduler.weights.affinity.'
-            'ServerGroupSoftAntiAffinityWeigher')
 
     if not instance_uuid:
         return
@@ -306,31 +297,25 @@ def _get_group_details(context, instance_uuid, user_group_hosts=None):
     except exception.InstanceGroupNotFound:
         return
 
-    policies = set(('anti-affinity', 'affinity', 'soft-affinity',
-                    'soft-anti-affinity'))
-    if any((policy in policies) for policy in group.policies):
-        if not _SUPPORTS_AFFINITY and 'affinity' in group.policies:
-            msg = _("ServerGroupAffinityFilter not configured")
-            LOG.error(msg)
-            raise exception.UnsupportedPolicyException(reason=msg)
-        if not _SUPPORTS_ANTI_AFFINITY and 'anti-affinity' in group.policies:
-            msg = _("ServerGroupAntiAffinityFilter not configured")
-            LOG.error(msg)
-            raise exception.UnsupportedPolicyException(reason=msg)
-        if (not _SUPPORTS_SOFT_AFFINITY
-                and 'soft-affinity' in group.policies):
-            msg = _("ServerGroupSoftAffinityWeigher not configured")
-            LOG.error(msg)
-            raise exception.UnsupportedPolicyException(reason=msg)
-        if (not _SUPPORTS_SOFT_ANTI_AFFINITY
-                and 'soft-anti-affinity' in group.policies):
-            msg = _("ServerGroupSoftAntiAffinityWeigher not configured")
-            LOG.error(msg)
-            raise exception.UnsupportedPolicyException(reason=msg)
-        group_hosts = set(group.get_hosts())
-        user_hosts = set(user_group_hosts) if user_group_hosts else set()
-        return GroupDetails(hosts=user_hosts | group_hosts,
-                            policies=group.policies, members=group.members)
+    # NOTE(jaypipes): There's only a single policy for the server group
+    group_policy = group.policies[0]
+    checks = {'affinity': (_validate_filter, 'ServerGroupAffinityFilter'),
+              'anti-affinity': (_validate_filter,
+                                'ServerGroupAntiAffinityFilter'),
+              'soft-affinity': (_validate_weigher,
+                                'ServerGroupSoftAffinityWeigher'),
+              'soft-anti-affinity': (_validate_weigher,
+                                     'ServerGroupSoftAntiAffinityWeigher')}
+
+    check_fn, class_name = checks[group_policy]
+    if not check_fn(class_name):
+        msg = _("%s not configured") % class_name
+        LOG.error(msg)
+        raise exception.UnsupportedPolicyException(reason=msg)
+    group_hosts = set(group.get_hosts())
+    user_hosts = set(user_group_hosts) if user_group_hosts else set()
+    return GroupDetails(hosts=user_hosts | group_hosts,
+                        policies=group.policies, members=group.members)
 
 
 def setup_instance_group(context, request_spec, filter_properties):
diff --git a/nova/tests/functional/test_server_group.py b/nova/tests/functional/test_server_group.py
index cc7bec29f7..5e52088c14 100644
--- a/nova/tests/functional/test_server_group.py
+++ b/nova/tests/functional/test_server_group.py
@@ -15,7 +15,6 @@
 
 import time
 
-import mock
 from oslo_config import cfg
 
 from nova import context
@@ -496,7 +495,6 @@ class ServerGroupAffinityConfTest(ServerGroupTestBase):
     # Load only anti-affinity filter so affinity will be missing
     _enabled_filters = ['ServerGroupAntiAffinityFilter']
 
-    @mock.patch('nova.scheduler.utils._SUPPORTS_AFFINITY', None)
     def test_affinity_no_filter(self):
         created_group = self.api.post_server_groups(self.affinity)
 
@@ -513,7 +511,6 @@ class ServerGroupAntiAffinityConfTest(ServerGroupTestBase):
     # Load only affinity filter so anti-affinity will be missing
     _enabled_filters = ['ServerGroupAffinityFilter']
 
-    @mock.patch('nova.scheduler.utils._SUPPORTS_ANTI_AFFINITY', None)
     def test_anti_affinity_no_filter(self):
         created_group = self.api.post_server_groups(self.anti_affinity)
 
@@ -536,7 +533,6 @@ class ServerGroupSoftAffinityConfTest(ServerGroupTestBase):
         return ['nova.scheduler.weights.affinity.'
                 'ServerGroupSoftAntiAffinityWeigher']
 
-    @mock.patch('nova.scheduler.utils._SUPPORTS_SOFT_AFFINITY', None)
     def test_soft_affinity_no_filter(self):
         created_group = self.api.post_server_groups(self.soft_affinity)
 
@@ -559,7 +555,6 @@ class ServerGroupSoftAntiAffinityConfTest(ServerGroupTestBase):
         return ['nova.scheduler.weights.affinity.'
                 'ServerGroupSoftAffinityWeigher']
 
-    @mock.patch('nova.scheduler.utils._SUPPORTS_SOFT_ANTI_AFFINITY', None)
     def test_soft_anti_affinity_no_filter(self):
         created_group = self.api.post_server_groups(self.soft_anti_affinity)
 
@@ -580,20 +575,6 @@ class ServerGroupTestV215(ServerGroupTestV21):
     soft_affinity = {'name': 'fake-name-4',
                      'policies': ['soft-affinity']}
 
-    def setUp(self):
-        super(ServerGroupTestV215, self).setUp()
-
-        soft_affinity_patcher = mock.patch(
-            'nova.scheduler.utils._SUPPORTS_SOFT_AFFINITY')
-        soft_anti_affinity_patcher = mock.patch(
-            'nova.scheduler.utils._SUPPORTS_SOFT_ANTI_AFFINITY')
-        self.addCleanup(soft_affinity_patcher.stop)
-        self.addCleanup(soft_anti_affinity_patcher.stop)
-        self.mock_soft_affinity = soft_affinity_patcher.start()
-        self.mock_soft_anti_affinity = soft_anti_affinity_patcher.start()
-        self.mock_soft_affinity.return_value = None
-        self.mock_soft_anti_affinity.return_value = None
-
     def _get_weight_classes(self):
         return ['nova.scheduler.weights.affinity.'
                 'ServerGroupSoftAffinityWeigher',
diff --git a/nova/tests/unit/scheduler/test_scheduler_utils.py b/nova/tests/unit/scheduler/test_scheduler_utils.py
index 1893a7e212..63035e742a 100644
--- a/nova/tests/unit/scheduler/test_scheduler_utils.py
+++ b/nova/tests/unit/scheduler/test_scheduler_utils.py
@@ -244,25 +244,25 @@ class SchedulerUtilsTestCase(test.NoDBTestCase):
     def test_validate_filters_configured(self):
         self.flags(enabled_filters='FakeFilter1,FakeFilter2',
                    group='filter_scheduler')
-        self.assertTrue(scheduler_utils.validate_filter('FakeFilter1'))
-        self.assertTrue(scheduler_utils.validate_filter('FakeFilter2'))
-        self.assertFalse(scheduler_utils.validate_filter('FakeFilter3'))
+        self.assertTrue(scheduler_utils._validate_filter('FakeFilter1'))
+        self.assertTrue(scheduler_utils._validate_filter('FakeFilter2'))
+        self.assertFalse(scheduler_utils._validate_filter('FakeFilter3'))
 
     def test_validate_weighers_configured(self):
         self.flags(weight_classes=[
             'ServerGroupSoftAntiAffinityWeigher', 'FakeFilter1'],
             group='filter_scheduler')
 
-        self.assertTrue(scheduler_utils.validate_weigher(
+        self.assertTrue(scheduler_utils._validate_weigher(
             'ServerGroupSoftAntiAffinityWeigher'))
-        self.assertTrue(scheduler_utils.validate_weigher('FakeFilter1'))
-        self.assertFalse(scheduler_utils.validate_weigher(
+        self.assertTrue(scheduler_utils._validate_weigher('FakeFilter1'))
+        self.assertFalse(scheduler_utils._validate_weigher(
             'ServerGroupSoftAffinityWeigher'))
 
     def test_validate_weighers_configured_all_weighers(self):
-        self.assertTrue(scheduler_utils.validate_weigher(
+        self.assertTrue(scheduler_utils._validate_weigher(
             'ServerGroupSoftAffinityWeigher'))
-        self.assertTrue(scheduler_utils.validate_weigher(
+        self.assertTrue(scheduler_utils._validate_weigher(
             'ServerGroupSoftAntiAffinityWeigher'))
 
     def _create_server_group(self, policy='anti-affinity'):
-- 
2.13.6

